<?php


function smart_reader_permission() {
	return array(
		'submit smart_reader' => array(
			'title' => t('Submit smart_reader'),
			'description' => t('Submit smart_reader form')

		) 
	);
}

function smart_reader_menu() {
	$items = array();
	
	$items['smart_reader'] = array(
		'title' => 'Lightweight rss reader',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('submit smart_reader'),
		'page callback' => 'smart_reader_render_content',
		'page arguments' => array()
	);

	$items['smart_reader/ajax'] = array(
		'title' => 'Lightweight rss reader',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('submit smart_reader'),
		'page callback' => 'smart_reader_display_feed_text',
		'page arguments' => array()
	);

	$items['admin/config/content/smart_reader'] = array(
	    'title' => 'Smart R(ss)eader',
	    'description' => 'Configuration for Smart R(ss)eader module',
	    'page callback' => 'smart_reader_render_config',
	    //'page arguments' => array('smart_reader_admin_form'),
	    'access arguments' => array('access administration pages'),
	    'type' => MENU_NORMAL_ITEM,
	  );



	return $items;
}

function smart_reader_render_config() {

	$result = db_query("SELECT * FROM {smart_reader}");

	$actChannelContainer = "";

	if ($result) {
    	$row = $result->fetchAssoc();
    	$actChannelContainer = smart_reader_get_feed_content_helper($row['url'],variable_get('smart_reader_max_item', 5));
	}
    
	$block = array(
	  'form0' => drupal_get_form('smart_reader_admin_form_0'),
	  'form1' => drupal_get_form('smart_reader_admin_form_1')
	);

	return $block;
}

function smart_reader_admin_form_0($from, &$form_state) {
	$form['smart_reader_max_item'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Maximum number of rss items'),
	    '#default_value' => variable_get('smart_reader_max_item', 5),
	    '#size' => 2,
	    '#maxlength' => 2,
	    '#description' => t('The maximum number of items to display.'),
	    '#required' => TRUE,
	);

  	return system_settings_form($form);
}

function smart_reader_admin_form_1($from, &$form_state) {
	$form['new_feed_status'] = array(
		'#type' => 'markup',
	    '#prefix' => '<div id="smart_reader_new_feed_info">',
	    '#suffix' => '</div>'
	);

	$form['new_feed_url'] = array(
		'#type' => 'textfield',
	    '#title' => t('New rss feed\'s url.'),
	    '#default_value' => '',
	    '#required' => TRUE,
	);

	$form['new_feed_title'] = array(
		'#type' => 'textfield',
	    '#title' => t('New rss feed\'s title.'),
	    '#default_value' => '',
	    '#description' => t('A short, descriptive name of the feed.'),
	    '#required' => TRUE,
	);

	$form['new_feed_submit'] = array(
	    '#type' => 'button',
	    '#value' => t('Add new feed!'),
	    '#ajax' => array(
       		'callback' => 'smart_reader_admin_add_feed',
       		'wrapper' => 'smart_reader_new_feed_info'
       	)
	);

	return $form;
}

function smart_reader_admin_add_feed($from, &$form_state) {

	//if($form_state['values']

	//$result = db_query("SELECT MAX(sr_id) as max_id FROM {smart_reader}");

	/*if($result) {
		$row = $result->fetchAssoc();*/
		$nid = db_insert('smart_reader')
			->fields(array(
				  'url' => $form_state['values']['new_feed_url'],
				  'title' => $form_state['values']['new_feed_title'],
			))
			->execute();
	//}


	
	return '<h2>Ok√©</h2>';
}

function smart_reader_render_content() {

	$result = db_query("SELECT * FROM {smart_reader}");

	$actChannelContainer = "";

	if ($result) {
    	$row = $result->fetchAssoc();
    	$actChannelContainer = smart_reader_get_feed_content_helper($row['url'],variable_get('smart_reader_max_item', 5));
	}
    
	$block = array(
	  'items' => array(
	    '#markup' => $actChannelContainer
	  ),
	  'form' => drupal_get_form('smart_reader_form')
	);

	return $block;
}

function smart_reader_get_feed_content($from, &$form_state) {

	if(isset($form_state['values']['select_feed'])) {
		$result = db_query("SELECT * FROM {smart_reader} WHERE sr_id = :id", array('id' => $form_state['values']['select_feed']));

		if ($result) {
	    	$row = $result->fetchAssoc();
	    	return smart_reader_get_feed_content_helper($row['url'],variable_get('smart_reader_max_item', 5));
		}
	} 

}

function smart_reader_get_feed_content_helper($feed,$count) {
	$result = smart_reader_helper_get_rss_content($feed,$count);
	$actChannelContent = '<div id="smart_rss_container"><h2>' . $result['channel_title'] . '</h2>';

	$i = 0;
    foreach($result['items'] as $item) {

    	$link = array(
		  '#type' => 'link',
		  '#title' => $item['title'],
		  '#href' => 'smart_reader/ajax',
		  '#ajax' => array(
		    'callback' => 'smart_reader_display_feed_text',
		    'wrapper' => 'smart_reader_item_' . $i,
		    'method' => 'replace',
		    'effect' => 'fade',
		  ),
		);
    	$actChannelContent .= '<div>' . drupal_render($link) . '</div>';
    	$actChannelContent .= '<div id="smart_reader_item_' . $i  . '" style="display:none">content</div>';

    	$i++;
    }

	$actChannelContent .= '</div>';

    return $actChannelContent;
}

function smart_reader_display_feed_text() {
	return '<div>contentjkjlkjl</div>';
}

function smart_reader_form($form, &$form_state) {

	$result = db_query("SELECT * FROM {smart_reader}");

	$feed_list = array();

	if ($result) {
    	while ($row = $result->fetchAssoc()) {
			$feed_list[$row['sr_id']] = $row['url']; 	          
	    }
	}

	$mode = array(0 => t('Existing rss'), 1 => t('New rss'));

	/*$form['mode'] = array(
	    '#type' => 'radios',
	    '#default_value' => 0,
	    '#options' => $mode,
	    
  	);*/

    $form['choose_feed'] = array(
    	'#title' => 'Choose a feed you\'d like to read!',
    	'#type' => 'fieldset',
    	'#collapsible' => TRUE,
    	'#collapsed' => FALSE,
    	'#states' => array(
    		'visible' => array(
    			':input[name="mode"]' => array('value' => 0)
    		)
    	)
    );

    $form['choose_feed']['select_feed'] = array(
       '#type' => 'select',
       '#title' => t('Select the reader'),
       '#options' => $feed_list,
       '#default_value' => '',
       '#ajax' => array(
       		'callback' => 'smart_reader_get_feed_content',
       		'wrapper' => 'smart_rss_container'
       	)
    );

    /*$form['save_feed'] = array(
    	'#title' => 'Save a new rss feed!',
    	'#type' => 'fieldset',
    	'#collapsible' => TRUE,
    	'#collapsed' => FALSE,
    	'#states' => array(
    		'visible' => array(
    			':input[name="mode"]' => array('value' => 1)
    		)
    	)
    );


	$form['save_feed']['save_feed_field'] = array(
	    '#type' => 'textfield',
	    '#title' => 'What is the url?',
	    '#size' => 10,
	    '#required' => TRUE,
	);

	$form['save_feed']['save_feed_submit'] = array(
	    '#type' => 'submit',
	    '#value' => t('Click Here!')
	);*/
	
	/*if(isset($form_state['values']['mode'])) {
		if($form_state['values']['mode'] == 0) {
			print('form state 0');
		} else {
			print('form state 1');
		}
	} else {
		print('mode not set');
	}*/
	
	return $form;
}

function smart_reader_mode() {
	//print('mode changed'); die();
}

function smart_reader_form_validate($form, &$form_state) {
	return true;
}

function smart_reader_form_submit($form, &$form_state) {
	$sr_id = db_insert('smart_reader')
			->fields(array(
				'url' => $form_state['values']['url']
			))
			->execute();
}

function smart_reader_helper_get_rss_content($feed, $max_post) {

	$result = array();

	//$xml=("http://news.google.com/news?ned=us&topic=h&output=rss");
	$xml = ($feed);
	$xmlDoc = new DOMDocument();
	$xmlDoc->load($xml);

	//get elements from "<channel>"
	$channel=$xmlDoc->getElementsByTagName('channel')->item(0);
	$channel_title = $channel->getElementsByTagName('title')
	->item(0)->childNodes->item(0)->nodeValue;
	$channel_link = $channel->getElementsByTagName('link')
	->item(0)->childNodes->item(0)->nodeValue;
	$channel_desc = $channel->getElementsByTagName('description')
	->item(0)->childNodes->item(0)->nodeValue;


	$result['channel_title'] = $channel_title;
	$result['channel_link'] = $channel_link;
	$result['channel_desc'] = $channel_desc;

	//get and output "<item>" elements

	$result['items'] = array();
	$x=$xmlDoc->getElementsByTagName('item');
	for ($i = 0; $i < $max_post; $i++) {
		  $item_title=$x->item($i)->getElementsByTagName('title')
		  ->item(0)->childNodes->item(0)->nodeValue;
		  $item_link=$x->item($i)->getElementsByTagName('link')
		  ->item(0)->childNodes->item(0)->nodeValue;
		  $item_desc=$x->item($i)->getElementsByTagName('description')
		  ->item(0)->childNodes->item(0)->nodeValue;

		  $result['items'][$i] = array();
		  $result['items'][$i]['title'] = $item_title;
		  $result['items'][$i]['link'] = $item_link;
		  $result['items'][$i]['desc'] = $item_desc;
	}

	return $result;
}